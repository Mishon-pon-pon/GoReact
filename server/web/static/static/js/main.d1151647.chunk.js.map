{"version":3,"sources":["containers/Quiz/Quiz.module.scss","components/ActiveQuiz/ActiveQuiz.module.scss","components/ActiveQuiz/AnswerList/AnswerItem/AnswerItem.module.scss","components/FinishedQuiz/FinishedQuiz.module.scss","hoc/Layout/Layout.module.scss","components/ActiveQuiz/AnswerList/AnswersList.module.scss","hoc/Layout/Layout.js","components/ActiveQuiz/AnswerList/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswerList/AnswersList.js","components/ActiveQuiz/ActiveQuiz.js","components/FinishedQuiz/FinishedQuiz.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","className","classes","this","props","children","Component","AnswerItem","cls","Array","state","push","join","onClick","onAnswerClick","answer","id","text","AnswersList","answers","map","index","key","ActiveQuiz","questionNumber","question","questionsLength","FinishedQuiz","success","Object","keys","results","reduce","total","quiz","quizItem","length","Quiz","Results","isFinished","ActiveQuestionNumber","AnswerState","rightAnswer","answerId","setState","timeout","window","setTimeout","isQuizFinished","clearTimeout","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1151647.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quiz\":\"Quiz_Quiz__3jivW\",\"QuizWrapper\":\"Quiz_QuizWrapper__2e6K4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuiz\":\"ActiveQuiz_ActiveQuiz__HgCOD\",\"Question\":\"ActiveQuiz_Question__26InD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"AnswerItem_AnswerItem__2fOd0\",\"success\":\"AnswerItem_success__2nqor\",\"error\":\"AnswerItem_error__2hQ8k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FinishedQuiz\":\"FinishedQuiz_FinishedQuiz__30i_0\",\"success\":\"FinishedQuiz_success__VWI2B\",\"error\":\"FinishedQuiz_error__3dSa4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__2wXxG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"AnswersList_AnswersList__33PEV\"};","import React, { Component } from \"react\";\r\nimport classes from './Layout.module.scss'\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <div className={classes['Layout']}>\r\n\r\n                <main > {this.props.children} </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout","import React from 'react'\r\nimport classes from './AnswerItem.module.scss'\r\n\r\nconst AnswerItem = props => {\r\n    const cls = new Array(classes['AnswerItem'])\r\n    if(props.state) {\r\n        cls.push(classes[props.state])\r\n    }\r\n    return (\r\n        <li className={cls.join(\" \")}\r\n        onClick={()=>{props.onAnswerClick(props.answer.id)}}>\r\n            {props.answer.text}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default AnswerItem","import React from 'react';\r\nimport classes from './AnswersList.module.scss';\r\nimport AnswerItem from './AnswerItem/AnswerItem';\r\n\r\nconst AnswersList = props => (\r\n    <ul className={classes['AnswersList']}>\r\n        {props.answers.map((answer, index) => {\r\n            return (\r\n                <AnswerItem\r\n                    key={index}\r\n                    answer={answer}\r\n                    onAnswerClick={props.onAnswerClick}\r\n                    state={props.state ? props.state[answer.id] : null}\r\n                />\r\n            )\r\n        })}\r\n    </ul>\r\n)\r\n\r\nexport default AnswersList","import React from 'react'\r\nimport classes from './ActiveQuiz.module.scss'\r\nimport AnswersList from './AnswerList/AnswersList'\r\n\r\nconst ActiveQuiz = props => (\r\n    <div className={classes['ActiveQuiz']}>\r\n        <p className={classes['Question']}>\r\n            <span>\r\n                <strong>{props.questionNumber}.</strong>&nbsp;\r\n                {props.question}\r\n            </span>\r\n\r\n            <small>{props.questionNumber} from {props.questionsLength}</small>\r\n        </p>\r\n\r\n        <AnswersList\r\n            answers={props.answers}\r\n            state={props.state}\r\n            onAnswerClick={props.onAnswerClick}\r\n        />\r\n    </div>\r\n)\r\n\r\nexport default ActiveQuiz","import React from 'react'\r\nimport classes from './FinishedQuiz.module.scss'\r\n\r\nconst FinishedQuiz = props => {\r\n    const success =  Object.keys(props.results).reduce((total, key) => {\r\n        if(props.results[key] === 'success') {\r\n            total ++;\r\n        }\r\n        return total;\r\n    }, 0)\r\n       return (\r\n        <div className={classes['FinishedQuiz']}>\r\n            <ul>\r\n                {\r\n                    props.quiz.map((quizItem, index) => {\r\n                        const cls = [\r\n                            'fa',\r\n                            props.results[quizItem.id] === 'error' ? 'fa-times' : 'fa-check',\r\n                            classes[props.results[quizItem.id]]\r\n                        ]\r\n                        return (\r\n                            <li>\r\n                                <strong>{index + 1}</strong>.&nbsp;\r\n                                {quizItem.question}\r\n                                <i className={cls.join(' ')} />\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n\r\n            <p>Success {success} from {props.quiz.length}</p>\r\n            <div>\r\n                <button>Repeat</button>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default FinishedQuiz","import React, { Component } from 'react'\r\nimport classes from './Quiz.module.scss'\r\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\r\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz'\r\n\r\nclass Quiz extends Component {\r\n    state = {\r\n        Results: {},\r\n        isFinished: false,\r\n        ActiveQuestionNumber: 0,\r\n        AnswerState: null,\r\n        quiz: [\r\n            {\r\n                question: 'What is sky color?',\r\n                id: 1,\r\n                rightAnswer: 1,\r\n                answers: [\r\n                    { text: 'blue', id: 1 },\r\n                    { text: 'green', id: 2 },\r\n                    { text: 'pink', id: 3 },\r\n                    { text: 'yellow', id: 4 }\r\n                ]\r\n            },\r\n            {\r\n                question: 'What was SPB born?',\r\n                id: 2,\r\n                rightAnswer: 2,\r\n                answers: [\r\n                    { text: '1700', id: 1 },\r\n                    { text: '1703', id: 2 },\r\n                    { text: '1750', id: 3 },\r\n                    { text: '1712', id: 4 }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n\r\n    onAnswerClick = (answerId) => {\r\n        if(this.state.AnswerState) {\r\n            if(this.state.AnswerState[answerId] === 'success') {\r\n                return\r\n            }\r\n        }\r\n        const question = this.state.quiz[this.state.ActiveQuestionNumber];\r\n        const results = this.state.Results;\r\n\r\n        if (question.rightAnswer === answerId) {\r\n            if(!results[answerId]) {\r\n                results[answerId] = 'success'\r\n            }\r\n\r\n            this.setState({\r\n                AnswerState: { [answerId]: 'success' },\r\n                Results: results\r\n            });\r\n            const timeout = window.setTimeout(() => {\r\n                this.setState({\r\n                    AnswerState: null\r\n                })\r\n                if (this.isQuizFinished()) {\r\n                    this.setState({\r\n                        isFinished: true\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        ActiveQuestionNumber: this.state.ActiveQuestionNumber + 1,\r\n                    })\r\n                }\r\n                window.clearTimeout(timeout);\r\n            }, 1000)\r\n        } else {\r\n            results[answerId] = 'error'\r\n            this.setState({\r\n                Results: results,\r\n                AnswerState: { [answerId]: 'error' }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    isQuizFinished() {\r\n        return this.state.ActiveQuestionNumber + 1 === this.state.quiz.length\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes['Quiz']}>\r\n                <div className={classes['QuizWrapper']}>\r\n\r\n                    <h1>Answer on question.</h1>\r\n                    {\r\n                        this.state.isFinished\r\n                        ? <FinishedQuiz\r\n                            results={this.state.Results}\r\n                            quiz={this.state.quiz}\r\n                        />\r\n                        : <ActiveQuiz\r\n                            answers={this.state.quiz[this.state.ActiveQuestionNumber].answers}\r\n                            question={this.state.quiz[this.state.ActiveQuestionNumber].question}\r\n                            onAnswerClick={this.onAnswerClick}\r\n                            questionsLength={this.state.quiz.length}\r\n                            questionNumber={this.state.ActiveQuestionNumber + 1}\r\n                            state={this.state.AnswerState}\r\n                        />\r\n                    }\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React from 'react';\r\nimport Layout from './hoc/Layout/Layout'\r\nimport Quiz from './containers/Quiz/Quiz'\r\n\r\nfunction App() {\r\n  return (\r\n    <Layout>\r\n      <Quiz></Quiz>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}