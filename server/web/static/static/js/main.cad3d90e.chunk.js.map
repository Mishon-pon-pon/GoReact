{"version":3,"sources":["containers/Quiz/Quiz.module.scss","components/ActiveQuiz/ActiveQuiz.module.scss","components/ActiveQuiz/AnswerList/AnswerItem/AnswerItem.module.scss","hoc/Layout/Layout.module.scss","components/ActiveQuiz/AnswerList/AnswersList.module.scss","hoc/Layout/Layout.js","components/ActiveQuiz/AnswerList/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswerList/AnswersList.js","components/ActiveQuiz/ActiveQuiz.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","className","classes","this","props","children","Component","AnswerItem","cls","Array","state","push","join","onClick","onAnswerClick","answer","id","text","AnswersList","answers","map","index","key","ActiveQuiz","questionNumber","question","questionsLength","Quiz","ActiveQuestionNumber","AnswerState","quiz","rightAnswer","answerId","setState","timeout","window","setTimeout","isQuizFinished","console","log","clearTimeout","length","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cad3d90e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quiz\":\"Quiz_Quiz__2THIz\",\"QuizWrapper\":\"Quiz_QuizWrapper__2wTef\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuiz\":\"ActiveQuiz_ActiveQuiz__2OH8k\",\"Question\":\"ActiveQuiz_Question__3-k9k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"AnswerItem_AnswerItem__2xCB4\",\"success\":\"AnswerItem_success__IFCPg\",\"error\":\"AnswerItem_error__15T5J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__ACkHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"AnswersList_AnswersList__fRb0C\"};","import React, { Component } from \"react\";\nimport classes from './Layout.module.scss'\n\nclass Layout extends Component {\n    render() {\n        return (\n            <div className={classes['Layout']}>\n\n                <main > {this.props.children} </main>\n            </div>\n        )\n    }\n}\n\nexport default Layout","import React from 'react'\nimport classes from './AnswerItem.module.scss'\n\nconst AnswerItem = props => {\n    const cls = new Array(classes['AnswerItem'])\n    if(props.state) {\n        cls.push(classes[props.state])\n    }\n    return (\n        <li className={cls.join(\" \")}\n        onClick={()=>{props.onAnswerClick(props.answer.id)}}>\n            {props.answer.text}\n        </li>\n    )\n}\n\nexport default AnswerItem","import React from 'react';\nimport classes from './AnswersList.module.scss';\nimport AnswerItem from './AnswerItem/AnswerItem';\n\nconst AnswersList = props => (\n    <ul className={classes['AnswersList']}>\n        {props.answers.map((answer, index) => {\n            return (\n                <AnswerItem\n                    key={index}\n                    answer={answer}\n                    onAnswerClick={props.onAnswerClick}\n                    state={props.state ? props.state[answer.id] : null}\n                />\n            )\n        })}\n    </ul>\n)\n\nexport default AnswersList","import React from 'react'\nimport classes from './ActiveQuiz.module.scss'\nimport AnswersList from './AnswerList/AnswersList'\n\nconst ActiveQuiz = props => (\n    <div className={classes['ActiveQuiz']}>\n        <p className={classes['Question']}>\n            <span>\n                <strong>{props.questionNumber}.</strong>&nbsp;\n                {props.question}\n            </span>\n\n            <small>{props.questionNumber} from {props.questionsLength}</small>\n        </p>\n\n        <AnswersList\n            answers={props.answers}\n            state={props.state}\n            onAnswerClick={props.onAnswerClick}\n        />\n    </div>\n)\n\nexport default ActiveQuiz","import React, { Component } from 'react'\nimport classes from './Quiz.module.scss'\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\n\nclass Quiz extends Component {\n    state = {\n        ActiveQuestionNumber: 0,\n        AnswerState: null,\n        quiz: [\n            {\n                question: 'What is sky color?',\n                id: 1,\n                rightAnswer: 1,\n                answers: [\n                    { text: 'blue', id: 1 },\n                    { text: 'green', id: 2 },\n                    { text: 'pink', id: 3 },\n                    { text: 'yellow', id: 4 }\n                ]\n            },\n            {\n                question: 'What was SPB born?',\n                id: 1,\n                rightAnswer: 2,\n                answers: [\n                    { text: '1700', id: 1 },\n                    { text: '1703', id: 2 },\n                    { text: '1750', id: 3 },\n                    { text: '1712', id: 4 }\n                ]\n            }\n        ]\n    }\n\n    onAnswerClick = (answerId) => {\n        const question = this.state.quiz[this.state.ActiveQuestionNumber];\n\n        if (question.rightAnswer === answerId) {\n            this.setState({\n                AnswerState: { [answerId]: 'success' }\n            });\n            const timeout = window.setTimeout(() => {\n                this.setState({\n                    AnswerState: null\n                })\n                if (this.isQuizFinished()) {\n                    console.log('finished')\n                } else {\n                    this.setState({\n                        ActiveQuestionNumber: this.state.ActiveQuestionNumber + 1,\n                    })\n                }\n                window.clearTimeout(timeout);\n            }, 1000)\n        } else {\n            this.setState({\n                AnswerState: { [answerId]: 'error' }\n            });\n        }\n\n    }\n\n    isQuizFinished() {\n        return this.state.ActiveQuestionNumber + 1 === this.state.quiz.length\n    }\n\n    render() {\n        return (\n            <div className={classes['Quiz']}>\n                <div className={classes['QuizWrapper']}>\n\n                    <h1>Answer on question.</h1>\n                    <ActiveQuiz\n                        answers={this.state.quiz[this.state.ActiveQuestionNumber].answers}\n                        question={this.state.quiz[this.state.ActiveQuestionNumber].question}\n                        onAnswerClick={this.onAnswerClick}\n                        questionsLength={this.state.quiz.length}\n                        questionNumber={this.state.ActiveQuestionNumber + 1}\n                        state={this.state.AnswerState}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Quiz;","import React from 'react';\nimport Layout from './hoc/Layout/Layout'\nimport Quiz from './containers/Quiz/Quiz'\n\nfunction App() {\n  return (\n    <Layout>\n      <Quiz></Quiz>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}